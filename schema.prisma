generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

enum Role {
  SINGER
  INSTRUMENTALIST
}
 
model User {
  id            String    @id @default(cuid())
  password      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role    @default(SINGER)
  accounts      Account[]
  sessions      Session[]

  userToGenres UserToGenres[]
 
  @@map("users")
}

model Genre {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  userToGenres UserToGenres[]

  @@map("genre")
}

model UserToGenres {
  userId  String
  genreId Int
  user    User   @relation(fields: [userId], references: [id])
  genre   Genre  @relation(fields: [genreId], references: [id])

  @@id([userId, genreId])
  @@index([userId], name: "UserIndex")
  @@index([genreId], name: "GenreIndex")
  @@map("user_genres")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}